{
  "basico": "📘 **BÁSICO EM PYTHON**\n\nPython é uma linguagem de programação de alto nível, fácil de aprender e muito usada em diversas áreas.\n\n**Print e comentários:**\n```python\nprint(\"Olá, mundo!\")  # Isso é um comentário\n```\n\n**Variáveis:**\n```python\nnome = \"Ana\"\nidade = 25\naltura = 1.70\n```\n\n**Operadores básicos:**\n- Soma: `+`\n- Subtração: `-`\n- Multiplicação: `*`\n- Divisão: `/`\n\nPython não exige ponto e vírgula no final das linhas, e usa indentação para organizar blocos de código.",

  "condicionais": "🔀 **CONDICIONAIS EM PYTHON**\n\nUsamos `if`, `elif` e `else` para executar ações diferentes dependendo de condições.\n\n**Exemplo básico:**\n```python\nidade = 18\n\nif idade >= 18:\n    print(\"Você é maior de idade.\")\nelif idade > 12:\n    print(\"Você é um adolescente.\")\nelse:\n    print(\"Você é uma criança.\")\n```\n\n- `if`: verifica a condição inicial\n- `elif`: verifica outra condição se a anterior for falsa\n- `else`: executa se nenhuma das anteriores for verdadeira",

  "lacos": "🔁 **LAÇOS DE REPETIÇÃO**\n\nPython possui dois tipos principais de laços:\n\n**FOR:** usado para repetir um bloco de código um número determinado de vezes\n```python\nfor i in range(5):\n    print(\"Repetição\", i)\n```\n\n**WHILE:** repete enquanto uma condição for verdadeira\n```python\ncontador = 0\nwhile contador < 3:\n    print(\"Contador:\", contador)\n    contador += 1\n```\n\n⚠️ Cuidado com loops infinitos! Certifique-se de que a condição de saída será alcançada.",

  "listas": "📚 **LISTAS EM PYTHON**\n\nListas armazenam vários elementos em uma única variável, são mutáveis e muito usadas.\n\n**Criando uma lista:**\n```python\nnomes = [\"Ana\", \"Beto\", \"Carlos\"]\n```\n\n**Acessando elementos:**\n```python\nprint(nomes[0])  # Ana\n```\n\n**Principais métodos:**\n- `append(x)`: adiciona\n- `remove(x)`: remove\n- `sort()`: ordena\n\n**Exemplo:**\n```python\nnomes.append(\"Diana\")\nprint(nomes)\n```\n\nListas podem conter diferentes tipos de dados: números, textos, outras listas, etc.",

  "tuplas": "📦 **TUPLAS EM PYTHON**\n\nTuplas são como listas, mas **imutáveis** (não podem ser alteradas depois de criadas).\n\n**Criando tuplas:**\n```python\ncoordenadas = (10, 20)\n```\n\n**Acessando elementos:**\n```python\nprint(coordenadas[0])  # 10\n```\n\n**Imutabilidade:**\n```python\ncoordenadas[0] = 5  # Erro! Tuplas não podem ser modificadas\n```\n\nTuplas são úteis quando você quer garantir que os dados não serão alterados por engano. Elas também são mais rápidas que listas para acesso e iteração.",

  "funcoes": "⚙️ **FUNÇÕES EM PYTHON**\n\nFunções permitem reutilizar código e deixar o programa mais organizado.\n\n**Criando uma função:**\n```python\ndef saudacao():\n    print(\"Olá!\")\n```\n\n**Chamando a função:**\n```python\nsaudacao()\n```\n\n**Função com parâmetros:**\n```python\ndef apresentar(nome):\n    print(\"Olá,\", nome)\n\napresentar(\"Carlos\")\n```\n\n**Função que retorna um valor:**\n```python\ndef somar(a, b):\n    return a + b\n\nresultado = somar(2, 3)\nprint(resultado)\n```\n\nFunções podem ter valores padrão, múltiplos parâmetros e até retornar várias saídas."
}
