{
  "basico": "<size=140%><b>BÁSICO EM PYTHON</b></size>\n\nPython é uma linguagem de alto nível, fácil de aprender e muito usada em diversas áreas.\n\n<b>Print e comentários:</b>\n<i>print(\"Olá, mundo!\")  # Isso é um comentário</i>\n\n<b>Variáveis:</b>\n<i>nome = \"Ana\"\nidade = 25\naltura = 1.70</i>\n\n<b>Operadores básicos:</b>\n- Soma: +\n- Subtração: -\n- Multiplicação: *\n- Divisão: /\n\nPython não exige ponto e vírgula no final das linhas e usa indentação para organizar blocos de código.",

  "condicionais": "<size=140%><b>CONDICIONAIS EM PYTHON</b></size>\n\nUsamos <b>if</b>, <b>elif</b> e <b>else</b> para executar ações diferentes dependendo de condições.\n\n<b>Exemplo:</b>\n<i>idade = 18\n\nif idade >= 18:\n    print(\"Você é maior de idade.\")\nelif idade > 12:\n    print(\"Você é um adolescente.\")\nelse:\n    print(\"Você é uma criança.\")</i>\n\n- <b>if</b>: verifica a condição inicial\n- <b>elif</b>: verifica outra condição se a anterior for falsa\n- <b>else</b>: executa se nenhuma das anteriores for verdadeira",

  "lacos": "<size=140%><b>LAÇOS DE REPETIÇÃO</b></size>\n\nPython possui dois tipos principais de laços:\n\n<b>FOR:</b> usado para repetir um bloco de código um número determinado de vezes:\n<i>for i in range(5):\n    print(\"Repetição\", i)</i>\n\n<b>WHILE:</b> repete enquanto uma condição for verdadeira:\n<i>contador = 0\nwhile contador < 3:\n    print(\"Contador:\", contador)\n    contador += 1</i>\n\n<color=#FF5555><b>Cuidado com loops infinitos!</b></color>\nVerifique se há uma condição de saída.",

  "listas": "<size=140%><b>LISTAS EM PYTHON</b></size>\n\nListas armazenam vários elementos em uma única variável, são mutáveis e muito usadas.\n\n<b>Criando uma lista:</b>\n<i>nomes = [\"Ana\", \"Beto\", \"Carlos\"]</i>\n\n<b>Acessando elementos:</b>\n<i>print(nomes[0])  # Ana</i>\n\n<b>Principais métodos:</b>\n- <b>append(x)</b>: adiciona\n- <b>remove(x)</b>: remove\n- <b>sort()</b>: ordena\n\n<b>Exemplo:</b>\n<i>nomes.append(\"Diana\")\nprint(nomes)</i>\n\nListas podem conter diferentes tipos de dados: números, textos, outras listas etc.",

  "tuplas": "<size=140%><b>TUPLAS EM PYTHON</b></size>\n\nTuplas são como listas, mas <b>imutáveis</b> (não podem ser alteradas depois de criadas).\n\n<b>Criando tuplas:</b>\n<i>coordenadas = (10, 20)</i>\n\n<b>Acessando elementos:</b>\n<i>print(coordenadas[0])  # 10</i>\n\n<b>Imutabilidade:</b>\n<i>coordenadas[0] = 5  # Erro! Tuplas não podem ser modificadas</i>\n\nTuplas são úteis para garantir que os dados não serão alterados. Elas também são mais rápidas que listas para acesso e iteração.",

  "funcoes": "<size=140%><b>FUNÇÕES EM PYTHON</b></size>\n\nFunções permitem reutilizar código e deixar o programa mais organizado.\n\n<b>Criando uma função:</b>\n<i>def saudacao():\n    print(\"Olá!\")</i>\n\n<b>Chamando a função:</b>\n<i>saudacao()</i>\n\n<b>Função com parâmetros:</b>\n<i>def apresentar(nome):\n    print(\"Olá,\", nome)\n\napresentar(\"Carlos\")</i>\n\n<b>Função que retorna valor:</b>\n<i>def somar(a, b):\n    return a + b\n\nresultado = somar(2, 3)\nprint(resultado)</i>\n\nFunções podem ter valores padrão, múltiplos parâmetros e até retornar várias saídas."
}
